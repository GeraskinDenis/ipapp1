package ET;

import java.util.*;
import java.math.*;
import java.util.concurrent.*;
import java.sql.Timestamp;
import org.joda.time.*;
import ru.ip.server.logging.Log;
import ru.ip.server.logic.message.MessageType;
import ru.ip.server.entity.EntityDTO;
import ru.ip.server.utils.*;
import ru.ip.server.utils.http.*;
import ru.ip.server.exception.*;
import ru.ip.server.rest.client.EntityRestClient;
import ru.ip.server.database.sql.SQLUtils;
import ru.ip.server.database.sql.SimpleQuery;
import ru.ip.server.database.sql.ScrollQuery;
import ru.ip.server.threadpool.*;
import ru.ip.server.integration.v2.*;
import ru.ip.server.integration.v2.elements.*;
import ru.ip.server.office.loop.ExcelDataHolder;
import ru.ip.server.measureunit.*;
import ru.ip.server.module.*;
import ru.ip.server.module.cms.*;
import ru.ip.server.module.cms.model.*;
import ru.ip.server.module.itsm.*;
import ru.ip.server.module.itsm.model.*;
import ru.ip.server.module.planning.*;
import ru.ip.server.integration.mdm.*;
import ru.ip.server.integration.mdm.model.*;
import ru.ip.server.database.sql.QueryType;
import ru.ip.server.entity.EntityDecorator;
import java.sql.Time;

//Работа
public class Plannedactivity extends EntityDecorator {

	private static final String TABLE_NAME = "plannedactivity";

	public Plannedactivity() {
		this.record = new EntityDTO(TABLE_NAME);
	}

	public Plannedactivity(EntityDTO record) {
		if (record == null)
			throw new ValidationException("Origin record is null!");
		if (!record.getTableName().equals(TABLE_NAME)) {
			String message = "Using object for table '%s', but table of origin entity is '%s'.";
			throw new ValidationException(String.format(message, TABLE_NAME, record.getTableName()));
		}
		this.record = record;
	}

	//Дата назначения
	public Date get_Appoint_date() {
		return record.getAsDateTime("appoint_date");
	}

	//НРИ
	public Long get_Branch() {
		return record.getAsLong("branch");
	}

	//Рабочий график
	public String get_Calendarname() {
		return record.getAsString("calendarname");
	}

	//Категория работ
	public String get_Category() {
		return record.getAsString("category");
	}

	//КЕ
	public String get_Ci_shortname() {
		return record.getAsString("ci_shortname");
	}

	//Формат КЕ
	public Long get_Ci_shortname_format() {
		return record.getAsLong("ci_shortname_format");
	}

	//Объект работ
	public Long get_Ciid() {
		return record.getAsLong("ciid");
	}

	//Тип КЕ новый
	public Long get_Citype() {
		return record.getAsLong("citype");
	}

	//Тип КЕ
	public Long get_Citypeid() {
		return record.getAsLong("citypeid");
	}

	//Код закрытия
	public String get_Closing_code() {
		return record.getAsString("closing_code");
	}

	//Дата закрытия
	public Date get_Closing_time() {
		return record.getAsDateTime("closing_time");
	}

	//Цвет (CASE WHEN(workflowstepname IN('planned','appointed','in_work')AND(deadline<LOCALTIMESTAMP))THEN'#EB8A8A'WHEN((workflowstepname in('planned','appointed')AND(plannedstarttime<LOCALTIMESTAMP))OR(workflowstepname IN('planned','appointed','in_work')AND plannedendtime<LOCALTIMESTAMP))THEN'#E8E67D'END)
	public String get_Color() {
		return record.getAsString("color");
	}

	//Координатор
	public Long get_Coordinator() {
		return record.getAsLong("coordinator");
	}

	//Кем создано
	public Long get_Createdbyid() {
		return record.getAsLong("createdbyid");
	}

	//Дата создания
	public Date get_Createdtime() {
		return record.getAsDateTime("createdtime");
	}

	//Крайний срок
	public Date get_Deadline() {
		return record.getAsDateTime("deadline");
	}

	//Зафиксированный крайний срок
	public Date get_Deadline_fixed() {
		return record.getAsDateTime("deadline_fixed");
	}

	//Крайний срок нарушен
	public Boolean get_Deadlineoff() {
		return record.getAsBoolean("deadlineoff");
	}

	//Детальное описание
	public String get_Description() {
		return record.getAsString("description");
	}

	//Описание
	public String get_Displayname() {
		return record.getAsString("displayname");
	}

	//Фактическая длительность
	public Double get_Factduration() {
		return record.getAsDouble("factduration");
	}

	//Единицы фактической длительности
	public String get_Factdurtimeunits() {
		return record.getAsString("factdurtimeunits");
	}

	//Фактическое окончание
	public Date get_Factendtime() {
		return record.getAsDateTime("factendtime");
	}

	//Фактическое начало
	public Date get_Factstarttime() {
		return record.getAsDateTime("factstarttime");
	}

	//Переназначение группы
	public Long get_Group_reappoint_count() {
		return record.getAsLong("group_reappoint_count");
	}

	//Инициатор
	public Long get_Initiator() {
		return record.getAsLong("initiator");
	}

	//Обращение
	public Long get_Interaction() {
		return record.getAsLong("interaction");
	}

	//Автоматическое создание
	public Boolean get_Is_autogenerated() {
		return record.getAsBoolean("is_autogenerated");
	}

	//Стандарт
	public Boolean get_Is_standard() {
		return record.getAsBoolean("is_standard");
	}

	//Активно
	public Boolean get_Isactive() {
		return record.getAsBoolean("isactive");
	}

	//Окно показывалось
	public Boolean get_Isalertviewed() {
		return record.getAsBoolean("isalertviewed");
	}

	//Необязат. для закрытия
	public Boolean get_Isnt_nec_for_closing() {
		return record.getAsBoolean("isnt_nec_for_closing");
	}

	//ID
	public Long get_Plannedactivityid() {
		return record.getAsLong("plannedactivityid");
	}

	//Плановая длительность
	public Double get_Plannedduration() {
		return record.getAsDouble("plannedduration");
	}

	//Единицы плановой длительности
	public String get_Planneddurtimeunits() {
		return record.getAsString("planneddurtimeunits");
	}

	//Плановое окончание просрочено
	public Boolean get_Plannedendoff() {
		return record.getAsBoolean("plannedendoff");
	}

	//Плановое окончание
	public Date get_Plannedendtime() {
		return record.getAsDateTime("plannedendtime");
	}

	//Кол-во нарушений планового окончания
	public Long get_Plannedendtimeviolationcount() {
		return record.getAsLong("plannedendtimeviolationcount");
	}

	//Плановая трудоемкость, часов
	public Double get_Plannedlaborintensity() {
		return record.getAsDouble("plannedlaborintensity");
	}

	//Плановое начало
	public Date get_Plannedstarttime() {
		return record.getAsDateTime("plannedstarttime");
	}

	//Внутреннее имя
	public String get_Shortname() {
		return record.getAsString("shortname");
	}

	//taskConfHash
	public String get_Taskconfhash() {
		return record.getAsString("taskconfhash");
	}

	//Плановая длительность задач
	public Double get_Tasks_plannedduration() {
		return record.getAsDouble("tasks_plannedduration");
	}

	//Единицы плановой длительности задач
	public String get_Tasks_planneddurtimeunits() {
		return record.getAsString("tasks_planneddurtimeunits");
	}

	//Плановое окончание задач
	public Date get_Tasks_plannedendtime() {
		return record.getAsDateTime("tasks_plannedendtime");
	}

	//Плановое начало задач
	public Date get_Tasks_plannedstarttime() {
		return record.getAsDateTime("tasks_plannedstarttime");
	}

	//taskSetHash
	public String get_Tasksethash() {
		return record.getAsString("tasksethash");
	}

	//Шаблон
	public Long get_Templateid() {
		return record.getAsLong("templateid");
	}

	//Кем обновлено
	public Long get_Updatedbyid() {
		return record.getAsLong("updatedbyid");
	}

	//Дата обновления
	public Date get_Updatedtime() {
		return record.getAsDateTime("updatedtime");
	}

	//Work Flow
	public Long get_Workflowid() {
		return record.getAsLong("workflowid");
	}

	//Статус
	public Long get_Workflowstepid() {
		return record.getAsLong("workflowstepid");
	}

	//Название шага
	public String get_Workflowstepname() {
		return record.getAsString("workflowstepname");
	}

	//Группа
	public Long get_Workgroup() {
		return record.getAsLong("workgroup");
	}

	//Дата назначения группы
	public Date get_Workgroup_appoint_date() {
		return record.getAsDateTime("workgroup_appoint_date");
	}

	//Дата назначения
	public void set_Appoint_date(Date fieldValue) {
		record.set("appoint_date", fieldValue);
	}

	//НРИ
	public void set_Branch(Long fieldValue) {
		record.set("branch", fieldValue);
	}

	//Рабочий график
	public void set_Calendarname(String fieldValue) {
		record.set("calendarname", fieldValue);
	}

	//Категория работ
	public void set_Category(String fieldValue) {
		record.set("category", fieldValue);
	}

	//КЕ
	public void set_Ci_shortname(String fieldValue) {
		record.set("ci_shortname", fieldValue);
	}

	//Формат КЕ
	public void set_Ci_shortname_format(Long fieldValue) {
		record.set("ci_shortname_format", fieldValue);
	}

	//Объект работ
	public void set_Ciid(Long fieldValue) {
		record.set("ciid", fieldValue);
	}

	//Тип КЕ новый
	public void set_Citype(Long fieldValue) {
		record.set("citype", fieldValue);
	}

	//Тип КЕ
	public void set_Citypeid(Long fieldValue) {
		record.set("citypeid", fieldValue);
	}

	//Код закрытия
	public void set_Closing_code(String fieldValue) {
		record.set("closing_code", fieldValue);
	}

	//Дата закрытия
	public void set_Closing_time(Date fieldValue) {
		record.set("closing_time", fieldValue);
	}

	//Координатор
	public void set_Coordinator(Long fieldValue) {
		record.set("coordinator", fieldValue);
	}

	//Кем создано
	public void set_Createdbyid(Long fieldValue) {
		record.set("createdbyid", fieldValue);
	}

	//Дата создания
	public void set_Createdtime(Date fieldValue) {
		record.set("createdtime", fieldValue);
	}

	//Крайний срок
	public void set_Deadline(Date fieldValue) {
		record.set("deadline", fieldValue);
	}

	//Зафиксированный крайний срок
	public void set_Deadline_fixed(Date fieldValue) {
		record.set("deadline_fixed", fieldValue);
	}

	//Крайний срок нарушен
	public void set_Deadlineoff(Boolean fieldValue) {
		record.set("deadlineoff", fieldValue);
	}

	//Детальное описание
	public void set_Description(String fieldValue) {
		record.set("description", fieldValue);
	}

	//Описание
	public void set_Displayname(String fieldValue) {
		record.set("displayname", fieldValue);
	}

	//Фактическая длительность
	public void set_Factduration(Double fieldValue) {
		record.set("factduration", fieldValue);
	}

	//Единицы фактической длительности
	public void set_Factdurtimeunits(String fieldValue) {
		record.set("factdurtimeunits", fieldValue);
	}

	//Фактическое окончание
	public void set_Factendtime(Date fieldValue) {
		record.set("factendtime", fieldValue);
	}

	//Фактическое начало
	public void set_Factstarttime(Date fieldValue) {
		record.set("factstarttime", fieldValue);
	}

	//Переназначение группы
	public void set_Group_reappoint_count(Long fieldValue) {
		record.set("group_reappoint_count", fieldValue);
	}

	//Инициатор
	public void set_Initiator(Long fieldValue) {
		record.set("initiator", fieldValue);
	}

	//Обращение
	public void set_Interaction(Long fieldValue) {
		record.set("interaction", fieldValue);
	}

	//Автоматическое создание
	public void set_Is_autogenerated(Boolean fieldValue) {
		record.set("is_autogenerated", fieldValue);
	}

	//Стандарт
	public void set_Is_standard(Boolean fieldValue) {
		record.set("is_standard", fieldValue);
	}

	//Активно
	public void set_Isactive(Boolean fieldValue) {
		record.set("isactive", fieldValue);
	}

	//Окно показывалось
	public void set_Isalertviewed(Boolean fieldValue) {
		record.set("isalertviewed", fieldValue);
	}

	//Необязат. для закрытия
	public void set_Isnt_nec_for_closing(Boolean fieldValue) {
		record.set("isnt_nec_for_closing", fieldValue);
	}

	//ID
	public void set_Plannedactivityid(Long fieldValue) {
		record.set("plannedactivityid", fieldValue);
	}

	//Плановая длительность
	public void set_Plannedduration(Double fieldValue) {
		record.set("plannedduration", fieldValue);
	}

	//Единицы плановой длительности
	public void set_Planneddurtimeunits(String fieldValue) {
		record.set("planneddurtimeunits", fieldValue);
	}

	//Плановое окончание просрочено
	public void set_Plannedendoff(Boolean fieldValue) {
		record.set("plannedendoff", fieldValue);
	}

	//Плановое окончание
	public void set_Plannedendtime(Date fieldValue) {
		record.set("plannedendtime", fieldValue);
	}

	//Кол-во нарушений планового окончания
	public void set_Plannedendtimeviolationcount(Long fieldValue) {
		record.set("plannedendtimeviolationcount", fieldValue);
	}

	//Плановая трудоемкость, часов
	public void set_Plannedlaborintensity(Double fieldValue) {
		record.set("plannedlaborintensity", fieldValue);
	}

	//Плановое начало
	public void set_Plannedstarttime(Date fieldValue) {
		record.set("plannedstarttime", fieldValue);
	}

	//Внутреннее имя
	public void set_Shortname(String fieldValue) {
		record.set("shortname", fieldValue);
	}

	//taskConfHash
	public void set_Taskconfhash(String fieldValue) {
		record.set("taskconfhash", fieldValue);
	}

	//Плановая длительность задач
	public void set_Tasks_plannedduration(Double fieldValue) {
		record.set("tasks_plannedduration", fieldValue);
	}

	//Единицы плановой длительности задач
	public void set_Tasks_planneddurtimeunits(String fieldValue) {
		record.set("tasks_planneddurtimeunits", fieldValue);
	}

	//Плановое окончание задач
	public void set_Tasks_plannedendtime(Date fieldValue) {
		record.set("tasks_plannedendtime", fieldValue);
	}

	//Плановое начало задач
	public void set_Tasks_plannedstarttime(Date fieldValue) {
		record.set("tasks_plannedstarttime", fieldValue);
	}

	//taskSetHash
	public void set_Tasksethash(String fieldValue) {
		record.set("tasksethash", fieldValue);
	}

	//Шаблон
	public void set_Templateid(Long fieldValue) {
		record.set("templateid", fieldValue);
	}

	//Кем обновлено
	public void set_Updatedbyid(Long fieldValue) {
		record.set("updatedbyid", fieldValue);
	}

	//Дата обновления
	public void set_Updatedtime(Date fieldValue) {
		record.set("updatedtime", fieldValue);
	}

	//Work Flow
	public void set_Workflowid(Long fieldValue) {
		record.set("workflowid", fieldValue);
	}

	//Статус
	public void set_Workflowstepid(Long fieldValue) {
		record.set("workflowstepid", fieldValue);
	}

	//Название шага
	public void set_Workflowstepname(String fieldValue) {
		record.set("workflowstepname", fieldValue);
	}

	//Группа
	public void set_Workgroup(Long fieldValue) {
		record.set("workgroup", fieldValue);
	}

	//Дата назначения группы
	public void set_Workgroup_appoint_date(Date fieldValue) {
		record.set("workgroup_appoint_date", fieldValue);
	}

}
