package ButtonRule;

import java.util.*;
import java.math.*;
import java.util.concurrent.*;
import java.sql.Timestamp;
import org.joda.time.*;
import ru.ip.server.logging.Log;
import ru.ip.server.logic.message.MessageType;
import ru.ip.server.entity.EntityDTO;
import ru.ip.server.utils.*;
import ru.ip.server.utils.http.*;
import ru.ip.server.exception.*;
import ru.ip.server.rest.client.EntityRestClient;
import ru.ip.server.database.sql.SQLUtils;
import ru.ip.server.database.sql.SimpleQuery;
import ru.ip.server.database.sql.ScrollQuery;
import ru.ip.server.threadpool.*;
import ru.ip.server.integration.v2.*;
import ru.ip.server.integration.v2.elements.*;
import ru.ip.server.office.loop.ExcelDataHolder;
import ru.ip.server.measureunit.*;
import ru.ip.server.module.*;
import ru.ip.server.module.cms.*;
import ru.ip.server.module.cms.model.*;
import ru.ip.server.module.itsm.*;
import ru.ip.server.module.itsm.model.*;
import ru.ip.server.module.planning.*;
import ru.ip.server.integration.mdm.*;
import ru.ip.server.integration.mdm.model.*;

/**
DisplayName: Работа
Fields:
 - appoint_date (Дата назначения) - DATETIME
 - branch (НРИ) - INTEGER
 - calendarname (Рабочий график) - STRING
 - category (Категория работ) - STRING
 - ci_shortname (КЕ) - STRING
 - ci_shortname_format (Формат КЕ) - INTEGER
 - ciid (Объект работ) - INTEGER
 - citype (Тип КЕ новый) - INTEGER
 - citypeid (Тип КЕ) - INTEGER
 - closing_code (Код закрытия) - STRING
 - closing_time (Дата закрытия) - DATETIME
 - color (Цвет) - STRING, вычисление: CASE WHEN(workflowstepname IN('planned','appointed','in_work')AND(deadline<LOCALTIMESTAMP))THEN'#EB8A8A'WHEN((workflowstepname in('planned','appointed')AND(plannedstarttime<LOCALTIMESTAMP))OR(workflowstepname IN('planned','appointed','in_work')AND plannedendtime<LOCALTIMESTAMP))THEN'#E8E67D'END
 - coordinator (Координатор) - INTEGER
 - createdbyid (Кем создано) - INTEGER
 - createdtime (Дата создания) - DATETIME
 - deadline (Крайний срок) - DATETIME
 - deadline_fixed (Зафиксированный крайний срок) - DATETIME
 - deadlineoff (Крайний срок нарушен) - BOOLEAN
 - description (Детальное описание) - TEXT
 - displayname (Описание) - STRING
 - factduration (Фактическая длительность) - DOUBLE
 - factdurtimeunits (Единицы фактической длительности) - STRING
 - factendtime (Фактическое окончание) - DATETIME
 - factstarttime (Фактическое начало) - DATETIME
 - group_reappoint_count (Переназначение группы) - INTEGER
 - initiator (Инициатор) - INTEGER
 - interaction (Обращение) - INTEGER
 - is_autogenerated (Автоматическое создание) - BOOLEAN
 - is_standard (Стандарт) - BOOLEAN
 - isactive (Активно) - BOOLEAN
 - isalertviewed (Окно показывалось) - BOOLEAN
 - isnt_nec_for_closing (Необязат. для закрытия) - BOOLEAN
 - plannedactivityid (ID) - INTEGER
 - plannedduration (Плановая длительность) - DOUBLE
 - planneddurtimeunits (Единицы плановой длительности) - STRING
 - plannedendoff (Плановое окончание просрочено) - BOOLEAN
 - plannedendtime (Плановое окончание) - DATETIME
 - plannedendtimeviolationcount (Кол-во нарушений планового окончания) - INTEGER
 - plannedlaborintensity (Плановая трудоемкость, часов) - DOUBLE
 - plannedstarttime (Плановое начало) - DATETIME
 - shortname (Внутреннее имя) - STRING
 - taskconfhash (taskConfHash) - STRING
 - tasks_plannedduration (Плановая длительность задач) - DOUBLE
 - tasks_planneddurtimeunits (Единицы плановой длительности задач) - STRING
 - tasks_plannedendtime (Плановое окончание задач) - DATETIME
 - tasks_plannedstarttime (Плановое начало задач) - DATETIME
 - tasksethash (taskSetHash) - STRING
 - templateid (Шаблон) - INTEGER
 - updatedbyid (Кем обновлено) - INTEGER
 - updatedtime (Дата обновления) - DATETIME
 - workflowid (Work Flow) - INTEGER
 - workflowstepid (Статус) - INTEGER
 - workflowstepname (Название шага) - STRING
 - workgroup (Группа) - INTEGER
 - workgroup_appoint_date (Дата назначения группы) - DATETIME
*/

public class plannedactivity_ButtonRules {

	// Необходимые для корректной работы компилятора переменные
	private static final Log log = Log.getLogger("ClassLibraryLogger");
	private static Map<String, Object> searchFields = new HashMap<>();
	private static Map<String, Object> updateFields = new HashMap<>();
	private static List<EntityDTO> recordList = new ArrayList<>();

	//Изменить группу
	//button <sn>88059f37-b756-f104-2ef6-dfb04a504ad8</sn>
	public static void plannedactivity_reappoint_group_1238_onEdit(EntityDTO record, EntityDTO oldrecord) throws Exception {

		if (!(Lib.PlannedActivityUtils.canReappointPAGroup(record))) return;

		//region Do update
		//rule <sn>1e62b216-295b-7cae-9f2f-e7bb9e564332</sn>
		if (/*if*/record != null && !CommonUtils.isEmpty(record.getId())/*if*/) {
			//<body>
			record.doUpdate();
			//</body>
		}
		//endregion

	}

	//Переназначить Координатора
	//button <sn>c9b58abc-74ac-3444-5524-1b56ffc9af5e</sn>
	public static void reappoint_plannedactivity_1236_onEdit(EntityDTO record, EntityDTO oldrecord) throws Exception {

		if (!(Lib.PlannedActivityUtils.canReappointPACoordinator(record))) return;

		//region Do update
		//rule <sn>1e62b216-295b-7cae-9f2f-e7bb9e564332</sn>
		if (/*if*/record != null && !CommonUtils.isEmpty(record.getId())/*if*/) {
			//<body>
			record.doUpdate();
			//</body>
		}
		//endregion

	}

	//Отменить
	//button <sn>fe16e35a-1131-3613-fc33-7dc403fb05bd</sn>
	public static void pa_cancel_wf_1235_onEdit(EntityDTO record, EntityDTO oldrecord) throws Exception {

		if (!(Lib.PlannedActivityUtils.canUserCancelPA(record))) return;

		//region Отменить работу
		//rule <sn>a78ac8ad-76e4-bd28-6d9a-af7deed554bc</sn>
		if (/*if*/true/*if*/) {
			//<body>
			DateTime dt = new DateTime();
			record.set("factStartTime", dt);
			record.set("factEndTime", dt);
			
			record.set("closing_code", "Отменено");
			record.set("workflowstepid", 494);
			record.doUpdate();
			//</body>
		}
		//endregion

		//region Отменить задачи отмененной работы
		//rule <sn>aef8a005-02f9-e007-cdfa-bdd2c19ab782</sn>
		if (/*if*/true/*if*/) {
			//<body>
			if (!CommonUtils.isEmpty(record.getId())) {
			    // найти все дочерние задачи, которые можно отменить
			    List<EntityDTO> tasks = QueryUtils.getRecordList("task", 
			        "parent_entitytype='plannedactivity'"
			        + " and parent_entityid=" + record.getId()
			        + " and workflowstepname not in ('returned_back', 'completed', 'closed')");
			    
			    // если задачи найдены, послать команду на отмену
			    if (tasks != null) {
			        for(EntityDTO task : tasks) {
			            /*task.set("autoCancelEnabled", true);
			            task.processTransitions();*/
			            task.set("workflowstepname", "closed");
			            task.set("workflowstepid", 512);
			            task.doUpdate();
			        }
			    }
			}
			//</body>
		}
		//endregion

	}

}
