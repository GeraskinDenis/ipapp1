package EntityTypeRule;

import java.util.*;
import java.math.*;
import java.util.concurrent.*;
import java.sql.Timestamp;
import org.joda.time.*;
import ru.ip.server.logging.Log;
import ru.ip.server.logic.message.MessageType;
import ru.ip.server.entity.EntityDTO;
import ru.ip.server.utils.*;
import ru.ip.server.utils.http.*;
import ru.ip.server.exception.*;
import ru.ip.server.rest.client.EntityRestClient;
import ru.ip.server.database.sql.SQLUtils;
import ru.ip.server.database.sql.SimpleQuery;
import ru.ip.server.database.sql.ScrollQuery;
import ru.ip.server.threadpool.*;
import ru.ip.server.integration.v2.*;
import ru.ip.server.integration.v2.elements.*;
import ru.ip.server.office.loop.ExcelDataHolder;
import ru.ip.server.measureunit.*;
import ru.ip.server.module.*;
import ru.ip.server.module.cms.*;
import ru.ip.server.module.cms.model.*;
import ru.ip.server.module.itsm.*;
import ru.ip.server.module.itsm.model.*;
import ru.ip.server.module.planning.*;
import ru.ip.server.integration.mdm.*;
import ru.ip.server.integration.mdm.model.*;

/**
DisplayName: Работа
Fields:
 - appoint_date (Дата назначения) - DATETIME
 - branch (НРИ) - INTEGER
 - calendarname (Рабочий график) - STRING
 - category (Категория работ) - STRING
 - ci_shortname (КЕ) - STRING
 - ci_shortname_format (Формат КЕ) - INTEGER
 - ciid (Объект работ) - INTEGER
 - citype (Тип КЕ новый) - INTEGER
 - citypeid (Тип КЕ) - INTEGER
 - closing_code (Код закрытия) - STRING
 - closing_time (Дата закрытия) - DATETIME
 - color (Цвет) - STRING, вычисление: CASE WHEN(workflowstepname IN('planned','appointed','in_work')AND(deadline<LOCALTIMESTAMP))THEN'#EB8A8A'WHEN((workflowstepname in('planned','appointed')AND(plannedstarttime<LOCALTIMESTAMP))OR(workflowstepname IN('planned','appointed','in_work')AND plannedendtime<LOCALTIMESTAMP))THEN'#E8E67D'END
 - coordinator (Координатор) - INTEGER
 - createdbyid (Кем создано) - INTEGER
 - createdtime (Дата создания) - DATETIME
 - deadline (Крайний срок) - DATETIME
 - deadline_fixed (Зафиксированный крайний срок) - DATETIME
 - deadlineoff (Крайний срок нарушен) - BOOLEAN
 - description (Детальное описание) - TEXT
 - displayname (Описание) - STRING
 - factduration (Фактическая длительность) - DOUBLE
 - factdurtimeunits (Единицы фактической длительности) - STRING
 - factendtime (Фактическое окончание) - DATETIME
 - factstarttime (Фактическое начало) - DATETIME
 - group_reappoint_count (Переназначение группы) - INTEGER
 - initiator (Инициатор) - INTEGER
 - interaction (Обращение) - INTEGER
 - is_autogenerated (Автоматическое создание) - BOOLEAN
 - is_standard (Стандарт) - BOOLEAN
 - isactive (Активно) - BOOLEAN
 - isalertviewed (Окно показывалось) - BOOLEAN
 - isnt_nec_for_closing (Необязат. для закрытия) - BOOLEAN
 - plannedactivityid (ID) - INTEGER
 - plannedduration (Плановая длительность) - DOUBLE
 - planneddurtimeunits (Единицы плановой длительности) - STRING
 - plannedendoff (Плановое окончание просрочено) - BOOLEAN
 - plannedendtime (Плановое окончание) - DATETIME
 - plannedendtimeviolationcount (Кол-во нарушений планового окончания) - INTEGER
 - plannedlaborintensity (Плановая трудоемкость, часов) - DOUBLE
 - plannedstarttime (Плановое начало) - DATETIME
 - shortname (Внутреннее имя) - STRING
 - taskconfhash (taskConfHash) - STRING
 - tasks_plannedduration (Плановая длительность задач) - DOUBLE
 - tasks_planneddurtimeunits (Единицы плановой длительности задач) - STRING
 - tasks_plannedendtime (Плановое окончание задач) - DATETIME
 - tasks_plannedstarttime (Плановое начало задач) - DATETIME
 - tasksethash (taskSetHash) - STRING
 - templateid (Шаблон) - INTEGER
 - updatedbyid (Кем обновлено) - INTEGER
 - updatedtime (Дата обновления) - DATETIME
 - workflowid (Work Flow) - INTEGER
 - workflowstepid (Статус) - INTEGER
 - workflowstepname (Название шага) - STRING
 - workgroup (Группа) - INTEGER
 - workgroup_appoint_date (Дата назначения группы) - DATETIME
*/

public class plannedactivity_Rules {

	// Необходимые для корректной работы компилятора переменные
	private static final Log log = Log.getLogger("ClassLibraryLogger");
	private static Map<String, Object> searchFields = new HashMap<>();
	private static Map<String, Object> updateFields = new HashMap<>();
	private static List<EntityDTO> recordList = new ArrayList<>();

	public static void onOpen(EntityDTO record, EntityDTO oldrecord) throws Exception {

		//region Заполнить инициатора из текущего пользователя
		//rule <sn>690236b8-ae8d-06d0-5aec-1bb6541fedb0</sn>
		if (/*if*/record.isFieldEmpty("initiator")/*if*/) {
			//<body>
			// condition: record.isEmpty() || CommonUtils.isEmpty(record.getId())
			// if (record.isFieldEmpty("initiator"))
			    record.setIfEmpty("initiator", ContextUtils.getCurrentUserId());
			//</body>
		}
		//endregion

	}

	public static void beforeInsert(EntityDTO record, EntityDTO oldrecord) throws Exception {

		//region Проверить корректность заполнения полей
		//rule <sn>e8f3f911-2ce2-88c6-2f0d-87f03c0b39a0</sn>
		if (/*if*/!record.isFieldEmpty("interaction")/*if*/) {
			//<body>
			if (record.isFieldEmpty("displayname") && record.isFieldEmpty("templateId")){
			    throw new Exception("Необходимо заполнить Описание либо Шаблон Работы!");
			}
			else if (!record.getAsBooleanNullSub("noCheckWG", false) && record.isFieldEmpty("workgroup") && record.isFieldEmpty("branch")){
			    throw new Exception("Необходимо заполнить НРИ либо Рабочую группу!");
			}
			//</body>
		}
		//endregion

		//region Заполнить НРИ или РабГруппу работы
		//rule <sn>7c56dad9-fd61-5310-ede6-33d03d05ed36</sn>
		if (/*if*/true/*if*/) {
			//<body>
			if (!record.isFieldEmpty("workgroup")
			    || (record.isFieldEmpty("branch") && !record.isFieldEmpty("templateid")
			        && !CommonUtils.isSame(record.get("templateId"), oldrecord.get("templateId"))
			        )
			    ) {
			    
			    if (record.isFieldEmpty("workgroup") && !record.isFieldEmpty("templateid->workgroup")) {
			        record.set("workgroup", record.get("templateid->workgroup"));
			    }
			    
			   /* if (!CommonUtils.isSame(record.get("workgroup"), oldrecord.get("workgroup"))
			        && !record.isFieldEmpty("workgroup->nri->r_orgunitid")) {
			        record.set("branch", record.get("workgroup->nri->r_orgunitid"));
			    }
			    */
			} 
			/*else if (!record.isFieldEmpty("branch")) {
			    if (!CommonUtils.isSame(record.get("branch"), oldrecord.get("branch")) && !record.isFieldEmpty("branch->workgroup"))
			        record.set("workgroup", record.get("branch->workgroup"));
			}*/
			//</body>
		}
		//endregion

		//region Заполнить поле Календарь (Работа)
		//rule <sn>e0b9adb0-0dad-8461-cb13-9c294cdf03ff</sn>
		if (/*if*/true/*if*/) {
			//<body>
			if (!record.isFieldEmpty("workflowstepname") && Arrays.asList("new").contains(record.getAsString("workflowstepname"))) {
			
			    if (!record.isFieldEmpty("citypeid") && !record.isFieldEmpty("ci_shortname")) {
			        
			        String tableName = CIType.getCiTypeTableNameById(record.getAsInteger("ciTypeId"));
			        EntityDTO ciEntity = QueryUtils.getRecordByShortName(tableName, record.getAsString("ci_shortname"));
			        
			        if (ciEntity != null && !ciEntity.isFieldEmpty("user_unit")) {
			            EntityDTO oUnit = new EntityDTO("r_orgunit", ciEntity.getAsInteger("user_unit"));
			            
			            if (oUnit != null && !oUnit.isFieldEmpty("workschedule")){
			                EntityDTO cal = new EntityDTO("calendar", oUnit.getAsInteger("workschedule"));
			                if (cal != null && !cal.isFieldEmpty("shortname"))
			                    record.set("calendarname", cal.getAsString("shortname"));
			            }
			        }
			    }
			    
			    if (record.isFieldEmpty("calendarname")) {
			        
			        if (!record.isFieldEmpty("templateid")){
			            EntityDTO pTemplate = new EntityDTO("plannedactivity_template", record.getAsInteger("templateid"));
			            if(pTemplate != null && !pTemplate.isEmpty() && !pTemplate.isFieldEmpty("calendarname"))
			                record.set("calendarname", pTemplate.get("calendarname"));
			        }
			        else {
			            if(!record.isFieldEmpty("initiator")) {
			                EntityDTO initiator = new EntityDTO("user", record.getAsInteger("initiator"));
			                
			                if (initiator != null && !initiator.isEmpty() && !initiator.isFieldEmpty("orgunit")) {
			                    EntityDTO orgunit = new EntityDTO("r_orgunit", initiator.getAsInteger("orgunit"));
			                    if (orgunit != null && !orgunit.isEmpty() && !orgunit.isFieldEmpty("workschedule")) {
			                        
			                        EntityDTO cal = new EntityDTO("calendar", orgunit.getAsInteger("workschedule"));
			                        if (cal != null && !cal.isEmpty() && !cal.isFieldEmpty("shortname"))
			                            record.set("calendarname", cal.get("shortname"));
			                    }
			                }
			                
			            }
			        }
			        
			    }
			}
			
			if (record.isFieldEmpty("calendarname"))
			    record.set("calendarname", "9x5");
			//</body>
		}
		//endregion

		//region Рассчитать Крайний срок (Работа)
		//rule <sn>76678844-07da-e470-1b75-337c4248a9d2</sn>
		if (/*if*//*!record.isFieldEmpty("calendarname") &&*/ !record.isFieldEmpty("deadline")/*if*/) {
			//<body>
			/*if (!CommonUtils.isSame(record.get("calendarname"), oldrecord.get("calendarname"))
			    || !CommonUtils.isSame(record.get("deadline"), oldrecord.get("deadline"))) 
			{
			    DateTime dl = Lib.TaskTemplateUtils.getNextWorkHour(record.getDateTime("deadline"), 
			        record.getAsString("calendarname"));
			    if (dl != null && !CommonUtils.isSame(dl, record.getDateTime("deadline")))
			        record.set("deadline", dl);
			}*/
			if (!record.isFieldEmpty("interaction->deadline") && record.getDateTime("deadline").isAfter(record.getDateTime("interaction->deadline")))
			{
			    ContextUtils.addMessage("Крайний срок Работы №" + record.getId() + " уменьшен до крайнего срока родительского Обращения!", "WARNING");
			    record.set("deadline", record.getDateTime("interaction->deadline"));
			}
			//</body>
		}
		//endregion

		//region Заполнить данные из Шаблона работы сервер
		//rule <sn>6601a74d-134c-cc9a-a0cd-974617b69aa5</sn>
		if (/*if*/!record.isFieldEmpty("templateid") && !CommonUtils.isSame(record.getAsInteger("templateid"), oldrecord.getAsInteger("templateid"))/*if*/) {
			//<body>
			EntityDTO pTemplate = new EntityDTO("plannedactivity_template", record.getAsInteger("templateid"));
			if(pTemplate == null || pTemplate.isEmpty())
			    ContextUtils.addMessage("Не удается найти указанный шаблон", "ERROR");
			else {
			    record.set("needToCreateTasks", true);
			    
			    if (!pTemplate.isFieldEmpty("initiator"))
			        record.set("initiator", pTemplate.get("initiator"));
			    
			    if (!pTemplate.isFieldEmpty("ciTypeId"))
			        record.set("ciTypeId", pTemplate.get("ciTypeId"));
			    
			    if (!pTemplate.isFieldEmpty("ci_shortname"))
			        record.set("ci_shortname", pTemplate.get("ci_shortname"));
			    if (!pTemplate.isFieldEmpty("ci_shortname_format"))
			        record.set("ci_shortname_format", pTemplate.get("ci_shortname_format"));
			        
			    if (!pTemplate.isFieldEmpty("calendarname"))
			        record.set("calendarname", pTemplate.get("calendarname"));
			    
			    if (!pTemplate.isFieldEmpty("category"))
			        record.set("category", pTemplate.getAsString("category"));
			    
			    // record.set("is_autogenerated", true);
			        
			    if(!pTemplate.isFieldEmpty("workgroup"))
			        record.set("workgroup", pTemplate.get("workgroup"));
			    if(!pTemplate.isFieldEmpty("coordinator"))
			        record.set("coordinator", pTemplate.get("coordinator"));
			    else 
			        if (record.isFieldEmpty("coordinator"))
			            record.set("coordinator", record.get("workgroup->manager"));
			    
			    if(!pTemplate.isFieldEmpty("plannedlaborintensity"))
			        record.set("plannedlaborintensity", pTemplate.get("plannedlaborintensity"));
			    
			    if(!pTemplate.isFieldEmpty("activityName"))
			        record.set("displayName", pTemplate.getAsString("activityName"));
			    
			    if(!pTemplate.isFieldEmpty("description")) {
			        String desc = "";
			        if (!record.isFieldEmpty("description"))
			            desc += record.getAsString("description");
			        record.set("description", desc +  "\n" + pTemplate.getAsString("description"));
			    }
			    
			    
			    record.set("is_standard", true);
			
			
			    if(!pTemplate.isFieldEmpty("deadline_duration") 
			        && !pTemplate.isFieldEmpty("deadlinetimeunit") 
			        && !record.isFieldEmpty("calendarname")){
			        record.set("deadline", Lib.TaskTemplateUtils.calcDateWithDurationHuman3Measures(
			            new DateTime(),
			            pTemplate.getAsInteger("deadline_duration"),
			            pTemplate.getAsString("deadlinetimeUnit"),
			            record.getAsString("calendarname")
			        ));
			    }
			}
			//</body>
		}
		//endregion

		//region Установить необходимый филдформат для ci_shortname
		//rule <sn>e17f92cd-33c9-eb33-a96a-3cb60eb5119c</sn>
		if (/*if*/true/*if*/) {
			//<body>
			if(!record.isFieldEmpty("ciTypeId")) {
			
			    // установить новый формат, если тип объекта отличается от предыдущего
			    if(!CommonUtils.isSame(record.getAsInteger("ciTypeId"), oldrecord.getAsInteger("ciTypeId"))) {
			        
			        Integer formatId = Lib.FieldFormatUtils.getComplexFieldFormatIdByCiTypeId(record.getAsInteger("ciTypeId"));
			        
			        if(formatId != null)
			            record.set("ci_shortname_format", formatId);
			        else
			            record.set("ci_shortname_format", 5);   // вернуть к значениям по умолчанию (Строка)
			        
			    }
			
			} else
			    record.set("ci_shortname_format", 5);   // вернуть к значениям по умолчанию (Строка)
			//</body>
		}
		//endregion

		//region Установить значение поля ciId из ci_shortname
		//common rule <sn>7c4c7fe8-3640-24a3-98e0-be6afb03834c</sn>
		//entities: plannedactivity_template, plannedactivity
		if (/*if*/record.isFieldEmpty("CiShortnameChanged")/*if*/) {
			//<body>
			if(!CommonUtils.isSame(record.getAsString("ci_shortname"), oldrecord.getAsString("ci_shortname"))) {
			        
			    String tableName = CIType.getCiTypeTableNameById(record.getAsInteger("ciTypeId"));
			    EntityDTO ciEntity = QueryUtils.getRecord(tableName, "shortname = '" + record.getAsString("ci_shortname") + "'");
			    
			    if( ciEntity != null && !ciEntity.isEmpty() && !CommonUtils.isEmpty(ciEntity.getId()) ) {
			        record.set("CiShortnameChanged", true);
			        record.set("ciId", ciEntity.getId());
			    }
			}
			//</body>
		}
		//endregion

		//region Установить значение поля ci_shortname из ciId
		//common rule <sn>619567ec-6e3a-4a82-fe9b-4c21e76d0426</sn>
		//entities: plannedactivity_template, plannedactivity
		if (/*if*/!record.isFieldEmpty("ciTypeId") && !record.isFieldEmpty("ciId") && !CommonUtils.isSame(record.getAsInteger("ciId"), oldrecord.getAsInteger("ciId"))/*if*/) {
			//<body>
			String tableName = CIType.getCiTypeTableNameById(record.getAsInteger("ciTypeId"));
			EntityDTO ciEntity = new EntityDTO(tableName, record.getAsInteger("ciId"));
			
			if(ciEntity != null && !ciEntity.isEmpty() && !ciEntity.isFieldEmpty("shortname")) {
			    record.set("CiShortnameChanged", true);
			    record.set("ci_shortname", ciEntity.getAsString("shortname"));
			    
			    // учтановить филдформат для поля
			    Integer ffId = Lib.FieldFormatUtils.getComplexFieldFormatIdByCiTypeId(record.getAsInteger("ciTypeId"));
			    if (ffId == null) ffId = 5;
			    record.set("ci_shortname_format", ffId);
			}    
			//</body>
		}
		//endregion

		//region Рассчитать плановую длительность Работы
		//rule <sn>22965f4b-0bf3-6a41-b98b-78f92875843d</sn>
		if (/*if*/true/*if*/) {
			//<body>
			if (!record.isFieldEmpty("plannedStartTime")) {
			    if(!record.isFieldEmpty("plannedEndTime")){
			        long durUnitCount = 0;
			        String durTimeUnits = "HOUR";
			        
			        Period p = CalendarUtils.getPeriod(record.getAsString("calendarName"), 
			            record.getDateTime("plannedStartTime"), 
			            record.getDateTime("plannedEndTime"));
			            
			        durUnitCount = Lib.CalendarCalcUtils.getWorkHoursBtwnDates(record.getAsString("calendarName"), 
			            record.getDateTime("plannedStartTime"), 
			            record.getDateTime("plannedEndTime"));
			            
			        if (p.getMinutes() > 0) {
			            durUnitCount *= 60;
			            durUnitCount += p.getMinutes();
			            durTimeUnits = "MINUTE";
			        }
			                
			        record.set("plannedDuration", durUnitCount);
			        record.set("plannedDurTimeUnits", durTimeUnits);
			    } 
			    // else
			    //     ContextUtils.addMessage("plannedEndTime is null", "ERROR");
			}
			// else
			//      ContextUtils.addMessage("plannedStartTime is null", "ERROR");
			//</body>
		}
		//endregion

		//region Установить Дату назначения группы
		//rule <sn>bda61d87-6410-cb08-7cf7-e9b55eb29a2e</sn>
		if (/*if*/!record.isFieldEmpty("workgroup") && !CommonUtils.isSame(record.get("workgroup"), oldrecord.get("workgroup"))/*if*/) {
			//<body>
			record.set("workgroup_appoint_date", new DateTime());
			//</body>
		}
		//endregion

		//region Установить Дату назначения Координатора
		//rule <sn>7de8744a-282a-e346-3254-9c2d06f9b076</sn>
		if (/*if*/!record.isFieldEmpty("coordinator") && !CommonUtils.isSame(record.get("coordinator"), oldrecord.get("coordinator"))/*if*/) {
			//<body>
			record.set("appoint_date", new DateTime());
			//</body>
		}
		//endregion

	}

	public static void afterInsert(EntityDTO record, EntityDTO oldrecord) throws Exception {

		//region Записать данные об объекте в журнал после добавления
		//rule <sn>8b6749d2-eefc-1375-c6f6-f0a286ebd360</sn>
		if (/*if*/true/*if*/) {
			//<body>
			log.info("object of type '" + record.getTableName() + "' #" + record.getId() + " after create");
			//</body>
		}
		//endregion

		//region Создать задачи для Работы после создания Работы
		//rule <sn>575970c0-b983-eea3-041d-30051f212112</sn>
		if (/*if*/!record.isFieldEmpty("templateId")/*if*/) {
			//<body>
			// condition: !record.isFieldEmpty("templateId") && !CommonUtils.isEmpty(record.getId()) 
			//      && record.getAsBooleanNullSub("consists_of_tasks", false)
			// String recilt = "need_to_create: " + record.getAsBooleanNullSub("needToCreateTasksFromTemplate", false) + 
			// ", all condition = " + (!record.isFieldEmpty("templateId") 
			// && !CommonUtils.isEmpty(record.getId()) 
			// || record.getAsBooleanNullSub("needToCreateTasksFromTemplate", false));
			
			// log.info(recilt);
			// ContextUtils.addMessage(recilt);
			
			// record.set("needToCreateTasksAfterCreate", true);
			// log.info("create tasks after create");
			// record.doUpdate();
			
			// more true condition
			// if(!record.isFieldEmpty("templateId") 
			//     && !CommonUtils.isSame(record.getAsInteger("templateid"), oldrecord.getAsInteger("templateid"))
			//     || record.getAsBooleanNullSub("needToCreateTasksFromTemplate", false)) {
			        Lib.TaskTemplateUtils.createPlannedActivityTasks(record);
			        record.doUpdate();
			// }
			//</body>
		}
		//endregion

		//region Нужно рассчитать даты родительского Обращения
		//rule <sn>dce158e7-d617-7520-32cb-2e144292398d</sn>
		if (/*if*/!record.isFieldEmpty("interaction")/*if*/) {
			//<body>
			if (!CommonUtils.isSame(record.get("plannedStartTime"), oldrecord.get("plannedStartTime"))
			    || !CommonUtils.isSame(record.get("plannedEndTime"), oldrecord.get("plannedEndTime"))
			    || !CommonUtils.isSame(record.get("plannedLaborIntensity"), oldrecord.get("plannedLaborIntensity"))) {
			    EntityDTO inter = new EntityDTO("interaction", record.getAsInteger("interaction"));
			    if (inter != null && !inter.getAsBooleanNullSub("noRefreshDates", false)) {
			        inter.set("needToCalcPlannedDates", true);
			        inter.doUpdate();
			    }
			}
			//</body>
		}
		//endregion

	}

	public static void beforeUpdate(EntityDTO record, EntityDTO oldrecord) throws Exception {

		//region Заполнить НРИ или РабГруппу работы
		//rule <sn>7c56dad9-fd61-5310-ede6-33d03d05ed36</sn>
		if (/*if*/true/*if*/) {
			//<body>
			if (!record.isFieldEmpty("workgroup")
			    || (record.isFieldEmpty("branch") && !record.isFieldEmpty("templateid")
			        && !CommonUtils.isSame(record.get("templateId"), oldrecord.get("templateId"))
			        )
			    ) {
			    
			    if (record.isFieldEmpty("workgroup") && !record.isFieldEmpty("templateid->workgroup")) {
			        record.set("workgroup", record.get("templateid->workgroup"));
			    }
			    
			   /* if (!CommonUtils.isSame(record.get("workgroup"), oldrecord.get("workgroup"))
			        && !record.isFieldEmpty("workgroup->nri->r_orgunitid")) {
			        record.set("branch", record.get("workgroup->nri->r_orgunitid"));
			    }
			    */
			} 
			/*else if (!record.isFieldEmpty("branch")) {
			    if (!CommonUtils.isSame(record.get("branch"), oldrecord.get("branch")) && !record.isFieldEmpty("branch->workgroup"))
			        record.set("workgroup", record.get("branch->workgroup"));
			}*/
			//</body>
		}
		//endregion

		//region Заполнить поле Календарь (Работа)
		//rule <sn>e0b9adb0-0dad-8461-cb13-9c294cdf03ff</sn>
		if (/*if*/true/*if*/) {
			//<body>
			if (!record.isFieldEmpty("workflowstepname") && Arrays.asList("new").contains(record.getAsString("workflowstepname"))) {
			
			    if (!record.isFieldEmpty("citypeid") && !record.isFieldEmpty("ci_shortname")) {
			        
			        String tableName = CIType.getCiTypeTableNameById(record.getAsInteger("ciTypeId"));
			        EntityDTO ciEntity = QueryUtils.getRecordByShortName(tableName, record.getAsString("ci_shortname"));
			        
			        if (ciEntity != null && !ciEntity.isFieldEmpty("user_unit")) {
			            EntityDTO oUnit = new EntityDTO("r_orgunit", ciEntity.getAsInteger("user_unit"));
			            
			            if (oUnit != null && !oUnit.isFieldEmpty("workschedule")){
			                EntityDTO cal = new EntityDTO("calendar", oUnit.getAsInteger("workschedule"));
			                if (cal != null && !cal.isFieldEmpty("shortname"))
			                    record.set("calendarname", cal.getAsString("shortname"));
			            }
			        }
			    }
			    
			    if (record.isFieldEmpty("calendarname")) {
			        
			        if (!record.isFieldEmpty("templateid")){
			            EntityDTO pTemplate = new EntityDTO("plannedactivity_template", record.getAsInteger("templateid"));
			            if(pTemplate != null && !pTemplate.isEmpty() && !pTemplate.isFieldEmpty("calendarname"))
			                record.set("calendarname", pTemplate.get("calendarname"));
			        }
			        else {
			            if(!record.isFieldEmpty("initiator")) {
			                EntityDTO initiator = new EntityDTO("user", record.getAsInteger("initiator"));
			                
			                if (initiator != null && !initiator.isEmpty() && !initiator.isFieldEmpty("orgunit")) {
			                    EntityDTO orgunit = new EntityDTO("r_orgunit", initiator.getAsInteger("orgunit"));
			                    if (orgunit != null && !orgunit.isEmpty() && !orgunit.isFieldEmpty("workschedule")) {
			                        
			                        EntityDTO cal = new EntityDTO("calendar", orgunit.getAsInteger("workschedule"));
			                        if (cal != null && !cal.isEmpty() && !cal.isFieldEmpty("shortname"))
			                            record.set("calendarname", cal.get("shortname"));
			                    }
			                }
			                
			            }
			        }
			        
			    }
			}
			
			if (record.isFieldEmpty("calendarname"))
			    record.set("calendarname", "9x5");
			//</body>
		}
		//endregion

		//region Рассчитать Крайний срок (Работа)
		//rule <sn>76678844-07da-e470-1b75-337c4248a9d2</sn>
		if (/*if*//*!record.isFieldEmpty("calendarname") &&*/ !record.isFieldEmpty("deadline")/*if*/) {
			//<body>
			/*if (!CommonUtils.isSame(record.get("calendarname"), oldrecord.get("calendarname"))
			    || !CommonUtils.isSame(record.get("deadline"), oldrecord.get("deadline"))) 
			{
			    DateTime dl = Lib.TaskTemplateUtils.getNextWorkHour(record.getDateTime("deadline"), 
			        record.getAsString("calendarname"));
			    if (dl != null && !CommonUtils.isSame(dl, record.getDateTime("deadline")))
			        record.set("deadline", dl);
			}*/
			if (!record.isFieldEmpty("interaction->deadline") && record.getDateTime("deadline").isAfter(record.getDateTime("interaction->deadline")))
			{
			    ContextUtils.addMessage("Крайний срок Работы №" + record.getId() + " уменьшен до крайнего срока родительского Обращения!", "WARNING");
			    record.set("deadline", record.getDateTime("interaction->deadline"));
			}
			//</body>
		}
		//endregion

		//region Заполнить данные из Шаблона работы сервер
		//rule <sn>6601a74d-134c-cc9a-a0cd-974617b69aa5</sn>
		if (/*if*/!record.isFieldEmpty("templateid") && !CommonUtils.isSame(record.getAsInteger("templateid"), oldrecord.getAsInteger("templateid"))/*if*/) {
			//<body>
			EntityDTO pTemplate = new EntityDTO("plannedactivity_template", record.getAsInteger("templateid"));
			if(pTemplate == null || pTemplate.isEmpty())
			    ContextUtils.addMessage("Не удается найти указанный шаблон", "ERROR");
			else {
			    record.set("needToCreateTasks", true);
			    
			    if (!pTemplate.isFieldEmpty("initiator"))
			        record.set("initiator", pTemplate.get("initiator"));
			    
			    if (!pTemplate.isFieldEmpty("ciTypeId"))
			        record.set("ciTypeId", pTemplate.get("ciTypeId"));
			    
			    if (!pTemplate.isFieldEmpty("ci_shortname"))
			        record.set("ci_shortname", pTemplate.get("ci_shortname"));
			    if (!pTemplate.isFieldEmpty("ci_shortname_format"))
			        record.set("ci_shortname_format", pTemplate.get("ci_shortname_format"));
			        
			    if (!pTemplate.isFieldEmpty("calendarname"))
			        record.set("calendarname", pTemplate.get("calendarname"));
			    
			    if (!pTemplate.isFieldEmpty("category"))
			        record.set("category", pTemplate.getAsString("category"));
			    
			    // record.set("is_autogenerated", true);
			        
			    if(!pTemplate.isFieldEmpty("workgroup"))
			        record.set("workgroup", pTemplate.get("workgroup"));
			    if(!pTemplate.isFieldEmpty("coordinator"))
			        record.set("coordinator", pTemplate.get("coordinator"));
			    else 
			        if (record.isFieldEmpty("coordinator"))
			            record.set("coordinator", record.get("workgroup->manager"));
			    
			    if(!pTemplate.isFieldEmpty("plannedlaborintensity"))
			        record.set("plannedlaborintensity", pTemplate.get("plannedlaborintensity"));
			    
			    if(!pTemplate.isFieldEmpty("activityName"))
			        record.set("displayName", pTemplate.getAsString("activityName"));
			    
			    if(!pTemplate.isFieldEmpty("description")) {
			        String desc = "";
			        if (!record.isFieldEmpty("description"))
			            desc += record.getAsString("description");
			        record.set("description", desc +  "\n" + pTemplate.getAsString("description"));
			    }
			    
			    
			    record.set("is_standard", true);
			
			
			    if(!pTemplate.isFieldEmpty("deadline_duration") 
			        && !pTemplate.isFieldEmpty("deadlinetimeunit") 
			        && !record.isFieldEmpty("calendarname")){
			        record.set("deadline", Lib.TaskTemplateUtils.calcDateWithDurationHuman3Measures(
			            new DateTime(),
			            pTemplate.getAsInteger("deadline_duration"),
			            pTemplate.getAsString("deadlinetimeUnit"),
			            record.getAsString("calendarname")
			        ));
			    }
			}
			//</body>
		}
		//endregion

		//region Установить значение поля ciId из ci_shortname
		//common rule <sn>7c4c7fe8-3640-24a3-98e0-be6afb03834c</sn>
		//entities: plannedactivity_template, plannedactivity
		if (/*if*/record.isFieldEmpty("CiShortnameChanged")/*if*/) {
			//<body>
			if(!CommonUtils.isSame(record.getAsString("ci_shortname"), oldrecord.getAsString("ci_shortname"))) {
			        
			    String tableName = CIType.getCiTypeTableNameById(record.getAsInteger("ciTypeId"));
			    EntityDTO ciEntity = QueryUtils.getRecord(tableName, "shortname = '" + record.getAsString("ci_shortname") + "'");
			    
			    if( ciEntity != null && !ciEntity.isEmpty() && !CommonUtils.isEmpty(ciEntity.getId()) ) {
			        record.set("CiShortnameChanged", true);
			        record.set("ciId", ciEntity.getId());
			    }
			}
			//</body>
		}
		//endregion

		//region Установить значение поля ci_shortname из ciId
		//common rule <sn>619567ec-6e3a-4a82-fe9b-4c21e76d0426</sn>
		//entities: plannedactivity_template, plannedactivity
		if (/*if*/!record.isFieldEmpty("ciTypeId") && !record.isFieldEmpty("ciId") && !CommonUtils.isSame(record.getAsInteger("ciId"), oldrecord.getAsInteger("ciId"))/*if*/) {
			//<body>
			String tableName = CIType.getCiTypeTableNameById(record.getAsInteger("ciTypeId"));
			EntityDTO ciEntity = new EntityDTO(tableName, record.getAsInteger("ciId"));
			
			if(ciEntity != null && !ciEntity.isEmpty() && !ciEntity.isFieldEmpty("shortname")) {
			    record.set("CiShortnameChanged", true);
			    record.set("ci_shortname", ciEntity.getAsString("shortname"));
			    
			    // учтановить филдформат для поля
			    Integer ffId = Lib.FieldFormatUtils.getComplexFieldFormatIdByCiTypeId(record.getAsInteger("ciTypeId"));
			    if (ffId == null) ffId = 5;
			    record.set("ci_shortname_format", ffId);
			}    
			//</body>
		}
		//endregion

		//region Рассчитать плановые даты Работы
		//rule <sn>9252ce39-1465-bee7-8336-21d18e5a4f1b</sn>
		if (/*if*/true/*if*/) {
			//<body>
			DateTime startTime = null;
			List<EntityDTO> listFirstTask = QueryUtils.getRecordList("select min(t.planned_start) as pstart"
			    + " from fkv39o1z.v_task t where t.parent_entitytype='plannedactivity'"
			    + " and t.parent_entityid = " + record.getId());
			if(listFirstTask != null && listFirstTask.get(0) != null)
			    startTime = listFirstTask.get(0).getDateTime("pstart");
			    
			if(startTime == null && !record.isFieldEmpty("plannedStartTime"))
			    startTime = record.getDateTime("plannedStartTime");
			
			if(startTime == null)
			    startTime = new DateTime();
			
			DateTime plannedEndTime = Lib.TaskTemplateUtils.calcPaFinish(record, startTime);
			
			// long durUnitCount = 0;
			// String durTimeUnits = "HOUR";
			// org.joda.time.Duration d = new org.joda.time.Duration(startTime, plannedEndTime);
			// // if(d.getStandardSeconds() % 60 != 0) {
			// //     durTimeUnits = "SECOND";
			// //     durUnitCount = d.getStandardSeconds();
			// // } 
			// // else 
			// if(d.getStandardMinutes() % 60 != 0) {
			//     durTimeUnits = "MINUTE";
			//     durUnitCount = d.getStandardMinutes();
			// } 
			// else 
			//     durUnitCount = d.getStandardHours();
			
			if (!CommonUtils.isSame(record.getDateTime("plannedStartTime"), startTime)) {
			    // record.set("tasks_plannedStartTime", startTime);
			    record.set("plannedStartTime", startTime);
			}
			
			if (!CommonUtils.isSame(record.getDateTime("plannedEndTime"), plannedEndTime)) {
			    // record.set("tasks_plannedEndTime", plannedEndTime);
			    record.set("plannedEndTime", plannedEndTime);
			}
			
			// needUpdate |= !CommonUtils.isSame(record.getAsInteger("tasks_plannedDuration"), durUnitCount);
			// if (needUpdate) {
			//     record.set("tasks_plannedDuration", durUnitCount);
			//     record.set("plannedDuration", durUnitCount);
			// }
			// needUpdate |= !CommonUtils.isSame(record.getAsString("tasks_planneddurtimeunits"), durTimeUnits);
			// if (needUpdate) {
			//     record.set("tasks_plannedDurTimeUnits", durTimeUnits);
			//     record.set("plannedDurTimeUnits", durTimeUnits);
			// }
			
			
			
			
			// Расчет плановой трудоемкости
			List<EntityDTO> tasks = QueryUtils.getRecordList("task", "parent_entitytype='plannedactivity'"
			        + " and parent_entityid=" + record.getId());
			    
			Double sumLInt = 0.0;
			if (tasks != null) {
			    for(EntityDTO task : tasks) {
			        sumLInt += (Double)CommonUtils.emptySub(task.getAsDouble("plannedLaborIntensity"), 0.0);
			    }
			    
			    record.set("plannedLaborIntensity", sumLInt);
			}
			//</body>
		}
		//endregion

		//region Рассчитать плановую длительность Работы
		//rule <sn>22965f4b-0bf3-6a41-b98b-78f92875843d</sn>
		if (/*if*/true/*if*/) {
			//<body>
			if (!record.isFieldEmpty("plannedStartTime")) {
			    if(!record.isFieldEmpty("plannedEndTime")){
			        long durUnitCount = 0;
			        String durTimeUnits = "HOUR";
			        
			        Period p = CalendarUtils.getPeriod(record.getAsString("calendarName"), 
			            record.getDateTime("plannedStartTime"), 
			            record.getDateTime("plannedEndTime"));
			            
			        durUnitCount = Lib.CalendarCalcUtils.getWorkHoursBtwnDates(record.getAsString("calendarName"), 
			            record.getDateTime("plannedStartTime"), 
			            record.getDateTime("plannedEndTime"));
			            
			        if (p.getMinutes() > 0) {
			            durUnitCount *= 60;
			            durUnitCount += p.getMinutes();
			            durTimeUnits = "MINUTE";
			        }
			                
			        record.set("plannedDuration", durUnitCount);
			        record.set("plannedDurTimeUnits", durTimeUnits);
			    } 
			    // else
			    //     ContextUtils.addMessage("plannedEndTime is null", "ERROR");
			}
			// else
			//      ContextUtils.addMessage("plannedStartTime is null", "ERROR");
			//</body>
		}
		//endregion

		//region Рассчитать фактическую длительность Работы
		//rule <sn>c5e38015-bfb7-b45c-97da-0b307f089daa</sn>
		if (/*if*/!record.isFieldEmpty("factEndTime") && !CommonUtils.isSame( record.get("factEndTime"), oldrecord.get("factEndTime") )/*if*/) {
			//<body>
			if (!record.isFieldEmpty("factstarttime") && !record.isFieldEmpty("calendarname")) {
			    long durUnitCount = 0;
			    String durTimeUnits = "HOUR";
			    
			    DateTime factStart = Lib.CalendarCalcUtils.getNextWorkHour(
			        record.getDateTime("factstarttime"),
			        record.getAsString("calendarname"));
			        
			    DateTime factEnd = Lib.CalendarCalcUtils.getPrevWorkHour(
			        record.getDateTime("factendtime"),
			        record.getAsString("calendarname"));
			        
			    if (factEnd.isBefore(factStart))
			        factEnd = factStart;
			    
			    Period p = CalendarUtils.getPeriod(record.getAsString("calendarName"), 
			        factStart, 
			        factEnd);
			    
			    durUnitCount = Lib.CalendarCalcUtils.getWorkHoursBtwnDates(record.getAsString("calendarName"), 
			        factStart, 
			        factEnd);
			        
			    if (p.getMinutes() > 0) {
			        
			        int minutes = p.getMinutes();
			        if (minutes == 59) {
			            durUnitCount ++;
			        }
			        else {
			            durUnitCount *= 60;
			            durUnitCount += minutes;
			            durTimeUnits = "MINUTE";
			        }
			    }
			            
			    record.set("factDuration", durUnitCount);
			    record.set("factDurTimeUnits", durTimeUnits);
			}
			//</body>
		}
		//endregion

		//region Заполнить дату закрытия Задачи
		//rule <sn>d56163e6-ad24-01d3-be09-da8e5a3777ab</sn>
		if (/*if*/!record.isFieldEmpty("workflowstepname") && CommonUtils.isSame(record.get("workflowstepname"), "closed")/*if*/) {
			//<body>
			record.setIfEmpty("closing_time", new DateTime());
			//</body>
		}
		//endregion

		//region Учесть количество переназначений группы
		//rule <sn>f499aedd-ee42-be7e-d04f-d0e834323790</sn>
		if (/*if*/true/*if*/) {
			//<body>
			// condition:
			// !record.isFieldEmpty("group_reappoint_count") 
			//     && !record.isFieldEmpty("workgroup_appoint_date")
			//     && !record.isFieldEmpty("workgroup")
			//     && !CommonUtils.isSame(record.get("workgroup"), 
			//         oldrecord.get("workgroup"))
			
			if (!record.isFieldEmpty("group_reappoint_count")) {
			    
			    if (!record.isFieldEmpty("workgroup_appoint_date")
			        && !record.isFieldEmpty("workgroup")
			        && !CommonUtils.isSame(record.get("workgroup"),
			            oldrecord.get("workgroup"))) {
			        
			        record.set( "group_reappoint_count", 
			            (1 + record.getAsInteger("group_reappoint_count")) );
			    }
			}
			else
			    record.set( "group_reappoint_count", 0);
			//</body>
		}
		//endregion

		//region Установить Дату назначения группы
		//rule <sn>bda61d87-6410-cb08-7cf7-e9b55eb29a2e</sn>
		if (/*if*/!record.isFieldEmpty("workgroup") && !CommonUtils.isSame(record.get("workgroup"), oldrecord.get("workgroup"))/*if*/) {
			//<body>
			record.set("workgroup_appoint_date", new DateTime());
			//</body>
		}
		//endregion

		//region Установить Дату назначения Координатора
		//rule <sn>7de8744a-282a-e346-3254-9c2d06f9b076</sn>
		if (/*if*/!record.isFieldEmpty("coordinator") && !CommonUtils.isSame(record.get("coordinator"), oldrecord.get("coordinator"))/*if*/) {
			//<body>
			record.set("appoint_date", new DateTime());
			//</body>
		}
		//endregion

		//region Подсчитать количество нарушений планового окончания (Работа)
		//rule <sn>841d16f2-5a83-33db-bd69-f7e1472d2fb9</sn>
		if (/*if*/!record.isFieldEmpty("workflowstepname") && !CommonUtils.isSame(record.getAsString("workflowstepname"), "new")/*if*/) {
			//<body>
			if (!record.isFieldEmpty("plannedEndTime")
			    && !record.getAsBooleanNullSub("plannedendoff", false)) {
			    
			    DateTime dt = null;
			    
			    if (!oldrecord.isFieldEmpty("plannedEndTime")) {    
			        if (record.getDateTime("plannedEndTime").isAfter(oldrecord.getDateTime("plannedEndTime")))
			            dt = oldrecord.getDateTime("plannedEndTime");
			        else
			            dt = record.getDateTime("plannedEndTime");
			    }
			    else
			        dt = record.getDateTime("plannedEndTime");
			    
			    if (dt.isBefore(new DateTime())) {
			        record.set("plannedendoff", true);
			        Integer endCount = 0;
			        if (!record.isFieldEmpty("plannedendtimeviolationcount"))
			            endCount = record.getAsInteger("plannedendtimeviolationcount");
			        record.set("plannedendtimeviolationcount", endCount + 1);
			    }
			}
			
			if (record.getAsBooleanNullSub("plannedendoff", false)
			    && !record.isFieldEmpty("plannedEndTime")
			    && record.getDateTime("plannedEndTime").isAfter(new DateTime()))
			    record.set("plannedendoff", false);
			    
			//</body>
		}
		//endregion

		//region Подсчитать количество изменений крайнего срока
		//rule <sn>a9762646-cc27-bfe8-1de5-47ed1b269f7f</sn>
		if (/*if*/!record.isFieldEmpty("workflowstepname") && !CommonUtils.isSame(record.getAsString("workflowstepname"), "new")/*if*/) {
			//<body>
			if (!CommonUtils.isSame(record.get("deadline"), oldrecord.get("deadline"))) {
			    Integer changeCount = 0;
			    if (!record.isFieldEmpty("deadlinechangecount")) {
			        changeCount = record.getAsInteger("deadlinechangecount");
			    }
			    record.set("deadlinechangecount", changeCount + 1);
			}
			//</body>
		}
		//endregion

		//region Сбросить шаг ЖЦ Работы
		//rule <sn>105962f1-769e-9072-0bb9-7da03025a5eb</sn>
		if (/*if*/true/*if*/) {
			//<body>
			if (!record.isFieldEmpty("workflowstepname")) {
			    
			    if (CommonUtils.isSame("appointed", record.getAsString("workflowstepname"))) {
			        
			        if (record.isFieldEmpty("workgroup")
			            || record.isFieldEmpty("plannedStartTime")
			            || record.isFieldEmpty("plannedEndTime")
			            || record.isFieldEmpty("deadline")
			            || record.isFieldEmpty("initiator")) {
			            record.set("workflowstepname", "new");
			            record.set("workflowstepid", 490);
			        }
			        
			        if (record.isFieldEmpty("coordinator")) {
			            record.set("workflowstepname", "planned");
			            record.set("workflowstepid", 491);
			        }
			    }
			    
			    if (CommonUtils.isSame("planned", record.getAsString("workflowstepname"))) {
			        if (record.isFieldEmpty("workgroup")
			            || record.isFieldEmpty("plannedStartTime")
			            || record.isFieldEmpty("plannedEndTime")
			            || record.isFieldEmpty("deadline")
			            || record.isFieldEmpty("initiator")) {
			            record.set("workflowstepname", "new");
			            record.set("workflowstepid", 490);
			        }
			    }
			            
			}
			//</body>
		}
		//endregion

		//region Необходимо удалить задачи после обновления
		//rule <sn>26b71af6-6295-3272-e870-ec1841887d24</sn>
		if (/*if*/!record.getAsBooleanNullSub("needToDeleteTasksAfterUpdate", false)/*if*/) {
			//<body>
			if (!record.isFieldEmpty("templateid") && !oldrecord.isFieldEmpty("templateid")
			    && !CommonUtils.isSame(record.get("templateid"), oldrecord.get("templateid")))
			    record.set("needToDeleteTasksAfterUpdate", true);
			//</body>
		}
		//endregion

		//region Необходимо создать Задачи после обновления
		//rule <sn>e31c658b-e1f2-3001-626d-d32d08c52dec</sn>
		if (/*if*/!record.isFieldEmpty("templateId") && !CommonUtils.isSame(record.get("templateid"), oldrecord.get("templateid"))/*if*/) {
			//<body>
			record.set("needToCreateTasksAfterUpdate", true);
			//</body>
		}
		//endregion

	}

	public static void afterUpdate(EntityDTO record, EntityDTO oldrecord) throws Exception {

		//region Записать данные об объекте в журнал после Сохранения
		//rule <sn>49e175fa-0688-d37a-8271-65f56dc378d2</sn>
		if (/*if*/true/*if*/) {
			//<body>
			log.info("object of type '" + record.getTableName() + "' #" + record.getId() + " after update");
			//</body>
		}
		//endregion

		//region Нужно рассчитать даты родительского Обращения
		//rule <sn>dce158e7-d617-7520-32cb-2e144292398d</sn>
		if (/*if*/!record.isFieldEmpty("interaction")/*if*/) {
			//<body>
			if (!CommonUtils.isSame(record.get("plannedStartTime"), oldrecord.get("plannedStartTime"))
			    || !CommonUtils.isSame(record.get("plannedEndTime"), oldrecord.get("plannedEndTime"))
			    || !CommonUtils.isSame(record.get("plannedLaborIntensity"), oldrecord.get("plannedLaborIntensity"))) {
			    EntityDTO inter = new EntityDTO("interaction", record.getAsInteger("interaction"));
			    if (inter != null && !inter.getAsBooleanNullSub("noRefreshDates", false)) {
			        inter.set("needToCalcPlannedDates", true);
			        inter.doUpdate();
			    }
			}
			//</body>
		}
		//endregion

		//region Удалить задачи из предыдущего шаблона
		//rule <sn>12d7b7a8-3ea3-1d1f-4dc8-4cc5708e3ddf</sn>
		if (/*if*/record.getAsBooleanNullSub("needToDeleteTasksAfterUpdate", false)/*if*/) {
			//<body>
			if (!record.isFieldEmpty("templateid") && !oldrecord.isFieldEmpty("templateid")
			    && !CommonUtils.isSame(record.get("templateid"), oldrecord.get("templateid"))) {
			    List<Integer> ttIndexList = QueryUtils.getIntegerList("select tt.task_templateid"
			        + " from fkv39o1z.v_task_template tt"
			        + " where tt.parent_entitytype = 'plannedactivity_template'"
			        + " and tt.parent_entityid = " + oldrecord.get("templateid"));
			        
			    String condition = "(-1)";
			    if (ttIndexList != null && ttIndexList.size() > 0) 
			        condition = Lib.TaskUtils.getStringForInCondition(ttIndexList);
			        
			    // ContextUtils.addMessage("condition = " + condition);    
			        
			    List<EntityDTO> taskLst = QueryUtils.getRecordList("task", 
			        "parent_entitytype = 'plannedactivity'"
			        + " and parent_entityid = " + record.getId()
			        + " and template in " + condition);
			        
			    if (taskLst != null) {
			        for (EntityDTO task: taskLst){
			            // ContextUtils.addMessage("task #" + task.getId() + " will be deletd");
			            task.doDelete();
			        }
			    }
			}
			//</body>
		}
		//endregion

		//region Создать задачи для Работы из шаблонов до сохранения
		//rule <sn>90ead8e3-f533-079b-6794-c676af42e5d8</sn>
		if (/*if*/true/*if*/) {
			//<body>
			// condition: !record.isFieldEmpty("templateId") && !CommonUtils.isEmpty(record.getId()) 
			//      && record.getAsBooleanNullSub("consists_of_tasks", false)
			// String recilt = "need_to_create: " + record.getAsBooleanNullSub("needToCreateTasksFromTemplate", false) + 
			// ", all condition = " + (!record.isFieldEmpty("templateId") 
			// && !CommonUtils.isEmpty(record.getId()) 
			// || record.getAsBooleanNullSub("needToCreateTasksFromTemplate", false));
			
			// log.info(recilt);
			// ContextUtils.addMessage(recilt);
			
			
			
			// more true condition
			if(!record.isFieldEmpty("templateId") 
			    && (!CommonUtils.isSame(record.get("templateid"), oldrecord.get("templateid"))
			        || record.getAsBooleanNullSub("needToCreateTasksAfterCreate", false)
			        || record.getAsBooleanNullSub("needToCreateTasksAfterUpdate", false)
			        )
			) {
			    Lib.TaskTemplateUtils.createPlannedActivityTasks(record);
			    // ContextUtils.addMessage("beforeUpdate");
			    // record.doUpdate();
			    EntityDTO lastTask = QueryUtils.getRecord("task", "parent_entitytype = 'plannedactivity'"
			        + " and is_autogenerated = 1 and parent_entityid = " + record.getId());
			    if (lastTask != null) {
			        lastTask.set("needUpdateParent", true);
			        lastTask.doUpdate();
			    }
			    // ContextUtils.addMessage("afterUpdate");
			    // log.info("new tasks will create after update");
			}
			//</body>
		}
		//endregion

	}

	public static void beforeDelete(EntityDTO record, EntityDTO oldrecord) throws Exception {

		//region Удалить задачи для ППР
		//rule <sn>af0e82d4-09c7-4ac1-9232-8833831859f6</sn>
		if (/*if*/!CommonUtils.isEmpty(record.getId())/*if*/) {
			//<body>
			Lib.TaskTemplateUtils.deletePlannedActivityTasks(record);
			//</body>
		}
		//endregion

		//region Удалить связанные вложения
		//common rule <sn>ea7d2071-87d9-4f96-0ee3-99eacc1cf68a</sn>
		//entities: plannedactivity_template, plannedactivity
		if (/*if*/!record.isFieldEmpty("shortname")/*if*/) {
			//<body>
			List<EntityDTO> attList = QueryUtils.getRecordList("documentations_po", 
			    "citype_shortname='" + record.getTableName() + "'"
			    + " and shortname = '" + record.getAsString("shortname") + "'");
			if (attList != null) {
			    for(EntityDTO att : attList) {
			        att.doDelete();
			    } 
			}
			//</body>
		}
		//endregion

	}

}
